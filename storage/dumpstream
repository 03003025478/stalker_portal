#!/usr/bin/python

import socket
import sys
import time
import struct
import operator
import datetime
import argparse
import signal
import threading
import os

if sys.version < '3':
    import httplib
    from urlparse import urlparse
    import urllib
else:
    import http.client
    from urllib.parse import urlparse
    import urllib.request, urllib.parse, urllib.error

def main():

    eseq  = 0
    flag  = 0
    f     = 0
    prev_fname  = -1
    buf   = ''

    sock = get_socket()

    while True:
        try:
            data = bytearray(b" " * 2048)
            len = sock.recv_into(data)

            if data and not buf:
                sys.stderr.write('Start capturing\n')
            buf = data[:len]
        except socket.timeout:
            sock.close()
            buf = ''
            sys.stderr.write('No data, reconnecting...\n')
            sock = get_socket()
            continue

        if buf[0] == 71:  # UDP 0x47
            data = buf
        else:  # RTP
            header_size = 12 + 4 * operator.and_(buf[0], 16)
            seq = int(hex(buf[2])[2:].zfill(2)+hex(buf[3])[2:].zfill(2), 16)

            if not flag:
                eseq = seq
                flag = 1
            if eseq != seq:
                sys.stderr.write('RTP: NETWORK CONGESTION - expected %d, received %d\n' % (eseq, seq))
                eseq = seq

            eseq += 1

            if eseq > 65535:
                eseq = 0

            data = buf[header_size:]

        if args.save_directory:
            fname = datetime.datetime.now().strftime(date_format)

            if prev_fname != fname:
                if f:
                    f.close()
                    async_rm_old_files()

                    if args.callback_url:
                        async_open_url(args.callback_url, {'start_time' : int(time.mktime((datetime.datetime.strptime(fname, date_format) - datetime.timedelta(hours=args.pieces_number)).timetuple()))})
                        async_open_url(args.callback_url, {'end_time' : int(time.time())})

                f = open(args.save_directory + fname +'.mpg', 'ab')

            prev_fname = fname
            f.write(data)
        else :
            if sys.version < '3':
                sys.stdout.write(data)
            else:
                sys.stdout.buffer.write(data)

class AsyncRmOldFiles(threading.Thread):
    def __init__(self):
        super(AsyncRmOldFiles, self).__init__()
        self.from_time = int(time.mktime((datetime.datetime.now() - datetime.timedelta(hours=args.pieces_number)).timetuple()))
    def run(self):
        for file in os.listdir(args.save_directory):
            if file.find('.mpg') == len(file)-4:
                try:
                    if self.from_time > int(time.mktime(datetime.datetime.strptime(file[:-4], date_format).timetuple())):
                        rm_file = args.save_directory + '/' + file
                        sys.stderr.write('Deleting ' + rm_file + '\n')
                        os.remove(rm_file)
                except ValueError:
                    pass
                except OSError as error:
                    sys.stderr.write('Error deleting file ' + file + ' - ' + error.message)

def async_rm_old_files():
    AsyncRmOldFiles().start()

def signal_handler(signal, frame):
    sys.exit(0)
signal.signal(signal.SIGINT, signal_handler)

class AsyncOpenUrl(threading.Thread):
    def __init__(self, url, params):
        super(AsyncOpenUrl, self).__init__()
        self.url    = url
        self.params = params
    def run(self):
        url    = urlparse(self.url)
        if sys.version < '3':
            params = urllib.urlencode(self.params)
        else:
            params = urllib.parse.urlencode(self.params)
        sys.stderr.write('Sending ' + params + ' to callback url: ' + self.url + '\n')
        if sys.version < '3':
            conn   = httplib.HTTPConnection(url.netloc)
        else:
            conn   = http.client.HTTPConnection(url.netloc)
        conn.request('PUT', url.path, params)
        resp   = conn.getresponse()
        data   = resp.read()
        sys.stderr.write(data + '\n')
        conn.close()

def async_open_url(url, params):
    AsyncOpenUrl(url, params).start()

def get_socket():
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)
        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        sock.bind((args.ip_address, args.port))
        mreq = struct.pack(">4sl", socket.inet_aton(args.ip_address), socket.INADDR_ANY)
        sock.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, mreq)
        sock.settimeout(10)
    except socket.error as e:
        sys.stderr.write(e.strerror + ', waiting 30s\n')
        time.sleep(30)
        return get_socket()

    return sock

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Stream dump. Can work with rtp and udp streams.')
    parser.add_argument('-a', '--ip_address', help='ip address', default='224.0.1.2')
    parser.add_argument('-p', '--port', help='port', default=5004, type=int)
    parser.add_argument('-d', '--save_directory', help='directory to save pieces')
    parser.add_argument('-n', '--pieces_number', help='number of pieces', type=int)
    parser.add_argument('-c', '--callback_url', help='callback url, use to send HTTP PUT with start_time/end_time params')
    args = parser.parse_args()
    #print args
    date_format = '%Y%m%d-%H'
    #date_format = '%Y%m%d-%M'
    sys.stderr.write('Stream dump\n')
    sys.stderr.write('Using %s:%d\n' % (args.ip_address, args.port))
    main()